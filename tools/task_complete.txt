const CanMessage ac_current = {
    "Set AC Current", 
    0x01, 
    "ac_current", 
    0-1, 
    1, 
    8, 
    -3276,8, 
    3276,7, 
    10, 
    "Aₚₖ", 
    "This command sets the target motor AC current (peak, not RMS). When the controller receives this message, it automatically switches to current control mode. This value must not be above the limits of the inverter and must be multiplied by 10 before sending. This is a signed parameter, and the sign represents the direction of the torque which correlates with the motor AC current. (For the correlation, please refer to the motor parameters)" 
};
const CanMessage NOT_USED = {
    "", 
    0x01, 
    "NOT_USED", 
    2-7, 
    16, 
    8, 
    -, 
    -, 
    -, 
    "-", 
    "Not relevant to the command. Fill with FFs or use 2-byte DLC." 
};
const CanMessage target_brake_current = {
    "Set Brake current", 
    0x02, 
    "target_brake_current", 
    0-1, 
    0, 
    8, 
    -3276,8, 
    3276,7, 
    10, 
    "Aₚₖ", 
    "Targets the brake current of the motor. It will result negative torque relatively to the forward direction of the motor. This value must be multiplied by 10 before sending, only positive currents are accepted." 
};
const CanMessage NOT_USED = {
    "", 
    0x02, 
    "NOT_USED", 
    2-7, 
    16, 
    8, 
    -, 
    -, 
    -, 
    "-", 
    "Not relevant to the command. Fill with FFs or use 2-byte DLC." 
};
const CanMessage Set_speed_(ERPM) = {
    "Set ERPM", 
    0x03, 
    "Set_speed_(ERPM)", 
    0-3, 
    0, 
    8, 
    -2147483648, 
    2147483647, 
    1, 
    "ERPM", 
    "This command enables the speed control of the motor with a target ERPM. This is a signed parameter, and the sign represents the direction of the spinning. For better operation you need to tune the PID of speed control. Equation: ERPM = Motor RPM * number of the motor pole pairs." 
};
const CanMessage NOT_USED = {
    "", 
    0x03, 
    "NOT_USED", 
    45754, 
    32, 
    8, 
    -, 
    -, 
    -, 
    "-", 
    "Not relevant to the command. Fill with FFs or use 4-byte DLC." 
};
const CanMessage Target_position = {
    "Set Position", 
    0x04 , 
    "Target_position", 
    0-1, 
    0, 
    8, 
    -3276,8, 
    3276,7, 
    10, 
    "degree", 
    "This value targets the desired position of the motor in degrees. This command is used to hold a position of the motor. This feature is enabled only if encoder is used as position sensor. The value has to be multiplied by 10 before sending." 
};
const CanMessage NOT_USED = {
    "", 
    0x04 , 
    "NOT_USED", 
    45695, 
    16, 
    8, 
    -, 
    -, 
    -, 
    "-", 
    "Not relevant to the command. Fill with FFs or use 2-byte DLC." 
};
const CanMessage Set_relative_current = {
    "Set Relative current", 
    0x05 , 
    "Set_relative_current", 
    0-1, 
    0, 
    8, 
    -3276,8, 
    3276,7, 
    10, 
    "%", 
    "This command sets a relative AC current to the minimum and maximum limits set by configuration. This achieves the same function as the “Set AC current” command. Gives you a freedom to send values between -100,0% and 100,0%. You do not need to know the motor limit parameters. This value must be between -100 and 100 and must be multiplied by 10 before sending." 
};
const CanMessage NOT_USED = {
    "", 
    0x05 , 
    "NOT_USED", 
    45695, 
    32, 
    8, 
    -, 
    -, 
    -, 
    "-", 
    "Not relevant to the command. Fill with FFs or use 2-byte DLC." 
};
const CanMessage  = {
    "Set relative brake current", 
    0x06 , 
    "", 
    0-1, 
    0, 
    8, 
    , 
    , 
    , 
    "", 
    "Targets the relative brake current of the motor. It will result negative torque relatively to the forward direction of the motor. This value must be between 0 and 100 and must be multiplied by 10 before sending Gives you a freedom to send values between 0% and 100,0%. You do not need to know the motor limit parameters. This value must be between 0 and 100 and has to be multiplied by 10 before sending" 
};
const CanMessage NOT_USED = {
    "", 
    0x06 , 
    "NOT_USED", 
    45695, 
    16, 
    8, 
    -, 
    -, 
    -, 
    "-", 
    "Not relevant to the command. Fill with FFs or use 2-byte DLC." 
};
const CanMessage Sets_an_output_to_HIGH_or_LOW = {
    "Set digital output ", 
    0x07 , 
    "Sets_an_output_to_HIGH_or_LOW", 
    0, 
    0, 
    8, 
    0, 
    1, 
    1, 
    "#", 
    "Sets the digital output 1 to HIGH (1) or LOW (0) state" 
};
const CanMessage Sets_an_output_to_HIGH_or_LOW = {
    "Set digital output ", 
    0x07 , 
    "Sets_an_output_to_HIGH_or_LOW", 
    0, 
    1, 
    8, 
    0, 
    1, 
    1, 
    "#", 
    "Sets the digital output 2 to HIGH (1) or LOW (0) state" 
};
const CanMessage Sets_an_output_to_HIGH_or_LOW = {
    "Set digital output ", 
    0x07, 
    "Sets_an_output_to_HIGH_or_LOW", 
    0, 
    2, 
    8, 
    0, 
    1, 
    1, 
    "#", 
    "Sets the digital output 3 to HIGH (1) or LOW (0) state" 
};
const CanMessage Sets_an_output_to_HIGH_or_LOW = {
    "Set digital output ", 
    0x07, 
    "Sets_an_output_to_HIGH_or_LOW", 
    0, 
    3, 
    8, 
    0, 
    1, 
    1, 
    "#", 
    "Sets the digital output 4 to HIGH (1) or LOW (0) state" 
};
const CanMessage Limiting_command = {
    "Max AC Current", 
    0x08, 
    "Limiting_command", 
    0-1, 
    0, 
    8, 
    -3276,8, 
    3276,7, 
    10, 
    "Aₚₖ", 
    "This value determines the maximum allowable drive current on the AC side. With this function you are able maximize the maximum torque on the motor. The value must be multiplied by 10 before sending." 
};
const CanMessage NOT_USED = {
    "", 
    0x08, 
    "NOT_USED", 
    45695, 
    32, 
    8, 
    -, 
    -, 
    -, 
    "-", 
    "Not relevant to the command. Fill with FFs or use 2-byte DLC." 
};
const CanMessage Limiting_command = {
    "Set maximum AC brake current", 
    0x09 , 
    "Limiting_command", 
    0-1, 
    0, 
    8, 
    -3276,8, 
    3276,7, 
    10, 
    "Aₚₖ", 
    "This value sets the maximum allowable brake current on the AC side. This value must be multiplied by 10 before sending, only negative currents are accepted." 
};
const CanMessage NOT_USED = {
    "", 
    0x09 , 
    "NOT_USED", 
    45695, 
    16, 
    8, 
    -, 
    -, 
    -, 
    "-", 
    "Not relevant to the command. Fill with FFs or use 2-byte DLC." 
};
const CanMessage Limiting_command = {
    "Max DC Current", 
    0x0A, 
    "Limiting_command", 
    0-1, 
    0, 
    8, 
    -3276,8, 
    3276,7, 
    10, 
    "A", 
    "This value determines the maximum allowable drive current on the DC side. With this command the BMS can limit the maximum allowable battery discharge current. The value has to be multiplied by 10 before sending." 
};
const CanMessage NOT_USED = {
    "", 
    0x0A, 
    "NOT_USED", 
    45695, 
    32, 
    8, 
    -, 
    -, 
    -, 
    "-", 
    "Not relevant to the command. Fill with FFs or use 2-byte DLC." 
};
const CanMessage Limiting_command = {
    "Set maximum DC brake current", 
    0x0B, 
    "Limiting_command", 
    0-1, 
    0, 
    8, 
    -3276,8, 
    3276,7, 
    10, 
    "%", 
    "This value determines the maximum allowable brake current on the DC side. With this command the BMS can limit the maximum allowable battery charge current. The value has to be multiplied by 10 before sending. Only negative currents are accepted." 
};
const CanMessage NOT_USED = {
    "", 
    0x0B, 
    "NOT_USED", 
    45695, 
    16, 
    8, 
    -, 
    -, 
    -, 
    "-", 
    "Not relevant to the command. Fill with FFs or use 2-byte DLC." 
};
const CanMessage Limiting_command = {
    "Drive Enable", 
    0x0C, 
    "Limiting_command", 
    0, 
    0, 
    8, 
    0, 
    255, 
    1, 
    "#", 
    "0: Drive not allowed 1: Drive allowed Only 0 and 1 values are accepted. Must be sent periodically to be enabled. Refer to chapter 4.3" 
};
const CanMessage NOT_USED = {
    "", 
    0x0C, 
    "NOT_USED", 
    45664, 
    8, 
    8, 
    -, 
    -, 
    -, 
    "-", 
    "Not relevant to the command. Fill with FFs or use 1-byte DLC." 
};
